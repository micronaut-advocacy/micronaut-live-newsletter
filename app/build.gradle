plugins {
    id("groovy")
    id("jacoco")
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id "io.micronaut.application" version "3.2.1"
    id "io.micronaut.aot" version "3.2.1"
}

version = "0.1"
group = "com.objectcomputing.newsletter"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("com.objectcomputing.newsletter.*")
    }
    aot {
        version = '1.0.0-M7' // https://github.com/micronaut-projects/micronaut-aot/releases
        optimizeServiceLoading = true
        convertYamlToJava = true
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
    }
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")

    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.views:micronaut-views-thymeleaf")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.problem:micronaut-problem-json")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-validation")
    implementation("com.amirkhawaja:ksuid:$ksuidVersion")
    implementation("io.micronaut.flyway:micronaut-flyway")

    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.security:micronaut-security-jwt")

    implementation("io.micronaut.email:micronaut-email-sendgrid:1.0.0")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")

    annotationProcessor("io.micronaut.serde:micronaut-serde-processor:$serdeVersion")
    implementation("io.micronaut.serde:micronaut-serde-api:$serdeVersion")
    testImplementation("io.micronaut.serde:micronaut-serde-api:$serdeVersion")

    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.testcontainers:spock")
    testImplementation("org.testcontainers:testcontainers")
}

if (Boolean.valueOf(rootProject.property('useSerde') as String)) {
configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute(module("io.micronaut:micronaut-jackson-databind"))
                .using(module("io.micronaut.serde:micronaut-serde-jackson:$serdeVersion"))
    }
}
}

application {
    mainClass.set("com.objectcomputing.newsletter.live.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

check {
    dependsOn jacocoTestCoverageVerification
}
jacocoTestReport {
    dependsOn test
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
        rule {
            element = 'CLASS'
            excludes = ["com.objectcomputing.newsletter.live.Application"]
            limit {
                minimum = 0.0
            }
        }
    }
}

graalvmNative.toolchainDetection = false


