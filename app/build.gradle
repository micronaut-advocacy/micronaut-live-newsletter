plugins {
    id("groovy")
    id("jacoco")
    id("com.github.johnrengelman.shadow") version "7.1.0"
    id "io.micronaut.application" version "3.1.1"
    id "io.micronaut.aot" version "3.1.1"
}

version = "0.1"
group = "io.micronaut.live"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("io.micronaut.live.*")
    }
    aot {
        version = '1.0.0-M5' // https://github.com/micronaut-projects/micronaut-aot/releases
        optimizeServiceLoading = true
        convertYamlToJava = true
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
    }
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.views:micronaut-views-thymeleaf")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation 'com.sendgrid:sendgrid-java:4.8.0'
    implementation("io.micronaut.problem:micronaut-problem-json")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-validation")
    implementation 'com.amirkhawaja:ksuid:1.0.0'
    implementation("io.micronaut.flyway:micronaut-flyway")

    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    //implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-session")
    implementation("io.micronaut.security:micronaut-security-ldap")


    implementation("io.micronaut.reactor:micronaut-reactor")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")

    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.testcontainers:spock")
    testImplementation("org.testcontainers:testcontainers")
}


application {
    mainClass.set("io.micronaut.live.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

check {
    dependsOn jacocoTestCoverageVerification
}
jacocoTestReport {
    dependsOn test
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
        rule {
            element = 'CLASS'
            excludes = ["io.micronaut.live.Application"]
            limit {
                minimum = 0.0
            }
        }
    }
}

